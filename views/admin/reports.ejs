<%- include('../partials/header', { title: 'Exam Reports' }) %>

<div class="row g-3 align-items-stretch mb-3">
    <div class="col-12">
        <h2 class="mb-2"><i class="bi bi-bar-chart"></i> Exam Reports</h2>
    </div>
    <div class="col-12 col-sm-6 col-lg-3">
        <div class="card h-100">
            <div class="card-body">
                <div class="d-flex align-items-center gap-2 mb-1">
                    <i class="bi bi-people fs-4 text-primary"></i>
                    <span class="text-muted">Total Submissions</span>
                </div>
                <div class="fs-3 fw-bold"><%= submissions.length %></div>
            </div>
        </div>
    </div>
    <div class="col-12 col-sm-6 col-lg-3">
        <div class="card h-100">
            <div class="card-body">
                <div class="d-flex align-items-center gap-2 mb-1">
                    <i class="bi bi-clipboard-check fs-4 text-success"></i>
                    <span class="text-muted">Average Score</span>
                </div>
                <div class="fs-3 fw-bold">
                    <% if (submissions.length === 0) { %>0<% } else { %>
                        <%
                            const avg = (submissions.reduce((a, s) => a + (s.score || 0), 0) / submissions.length).toFixed(2);
                        %>
                        <%= avg %>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
    <div class="col-12 col-sm-6 col-lg-3">
        <div class="card h-100">
            <div class="card-body">
                <div class="d-flex align-items-center gap-2 mb-1">
                    <i class="bi bi-journal-text fs-4 text-info"></i>
                    <span class="text-muted">Exams</span>
                </div>
                <div class="fs-3 fw-bold"><%= exams.length %></div>
            </div>
        </div>
    </div>
    <div class="col-12 col-sm-6 col-lg-3">
        <div class="card h-100">
            <div class="card-body">
                <div class="d-flex align-items-center gap-2 mb-1">
                    <i class="bi bi-calendar-event fs-4 text-warning"></i>
                    <span class="text-muted">Latest</span>
                </div>
                <div class="fs-6">
                    <% if (submissions.length === 0) { %>
                        â€”
                    <% } else { %>
                        <%= new Date(submissions[0].submittedAt).toLocaleString() %>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="card mb-3">
    <div class="card-body">
        <div class="row g-2 align-items-end">
            <div class="col-12 col-md-4">
                <label class="form-label">Search</label>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                    <input id="reportSearch" type="text" class="form-control" placeholder="Search by exam or student">
                </div>
            </div>
            <div class="col-12 col-md-4">
                <label class="form-label">Filter by Exam</label>
                <select id="examFilter" class="form-select">
                    <option value="">All Exams</option>
                    <% exams.forEach(e => { %>
                        <option value="<%= e._id %>"><%= e.title %> <%= e.subject ? '(' + e.subject + ')' : '' %></option>
                    <% }) %>
                </select>
            </div>
            <div class="col-12 col-md-4 text-md-end">
                <label class="form-label d-none d-md-block">&nbsp;</label>
                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <div class="form-check form-switch me-2" id="revealToggleWrapper" style="display:none;">
                        <input class="form-check-input" type="checkbox" role="switch" id="globalRevealToggle">
                        <label class="form-check-label" for="globalRevealToggle">Allow students to see correct answers</label>
                    </div>
                    <a href="/admin/manage-exams" class="btn btn-outline-secondary"><i class="bi bi-gear"></i> Manage Exams</a>
                    <a href="/admin/invalidated" class="btn btn-outline-danger"><i class="bi bi-shield-exclamation"></i> Invalidated</a>
                </div>
            </div>
        </div>
    </div>
  </div>

<div class="card">
    <div class="card-body">
        <% if (submissions.length === 0) { %>
            <div class="alert alert-info"><i class="bi bi-info-circle"></i> No submissions yet.</div>
        <% } else { %>
        <div class="table-responsive">
            <table class="table align-middle" id="reportsTable">
                <thead>
                    <tr>
                        <th>Exam</th>
                        <th>Subject</th>
                        <th>Student</th>
                        <th>Score</th>
                        <th>Submitted</th>
                        <th class="text-end">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% submissions.forEach(s => { %>
                        <tr data-exam-id="<%= s.exam ? s.exam._id : '' %>">
                            <td><%= s.exam ? s.exam.title : '-' %></td>
                            <td><%= s.exam && s.exam.subject ? s.exam.subject : '-' %></td>
                            <td><%= s.student ? (s.student.username || s.student.email) : '-' %></td>
                            <td>
                                <span class="badge <%= (s.score / (s.totalQuestions || 1)) >= 0.6 ? 'bg-success' : 'bg-warning text-dark' %>">
                                    <%= s.score %>/<%= s.totalQuestions %>
                                </span>
                            </td>
                            <td><%= new Date(s.submittedAt).toLocaleString() %></td>
                            <td class="text-end">
                                <div class="btn-group">
                                    <a href="/admin/exam-reports/<%= s._id %>" class="btn btn-sm btn-outline-primary"><i class="bi bi-eye"></i> View</a>
                                    <% if (s.status === 'invalidated') { %>
                                        <form action="/admin/exam-reports/reset/<%= s._id %>" method="POST" onsubmit="return confirm('Reset this submission to allow retake?')">
                                            <button class="btn btn-sm btn-outline-warning" type="submit"><i class="bi bi-arrow-counterclockwise"></i> Reset</button>
                                        </form>
                                    <% } %>
                                </div>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>
        <% } %>
    </div>
</div>

<script>
    (function(){
        // Build examId -> reveal map from server data
        const examRevealMap = {
            <% exams.forEach(function(e, idx){ %>
            '<%= e._id %>': <%= e.revealAnswersToStudents ? 'true' : 'false' %><%= idx < exams.length - 1 ? ',' : '' %>
            <% }) %>
        };
        const searchInput = document.getElementById('reportSearch');
        const examFilter = document.getElementById('examFilter');
        const revealWrapper = document.getElementById('revealToggleWrapper');
        const revealToggle = document.getElementById('globalRevealToggle');
        function applyFilters(){
            const q = (searchInput.value || '').toLowerCase();
            const examId = examFilter.value;
            document.querySelectorAll('#reportsTable tbody tr').forEach(tr => {
                const text = tr.innerText.toLowerCase();
                const matchesText = text.includes(q);
                const matchesExam = !examId || tr.getAttribute('data-exam-id') === examId;
                tr.style.display = (matchesText && matchesExam) ? '' : 'none';
            });
            // Toggle visibility of global reveal switch
            if (examId) {
                revealWrapper.style.display = '';
                // Set current checked state from map (default false)
                const current = !!examRevealMap[examId];
                revealToggle.checked = current;
            } else {
                revealWrapper.style.display = 'none';
            }
        }
        if (searchInput) searchInput.addEventListener('input', applyFilters);
        if (examFilter) examFilter.addEventListener('change', applyFilters);

        // Live updates
        try {
          const socket = (typeof window !== 'undefined' && window.__appSocket) ? window.__appSocket : io();
          socket.emit('join-admin');
          socket.on('reports:update', function(){
            // naive refresh to reflect updates
            location.reload();
          });
          socket.on('exams:update', function(payload){
            if (!payload) return;
            if (payload.type === 'reveal' && payload.examId) {
                examRevealMap[payload.examId] = !!payload.reveal;
                const currentSelected = examFilter && examFilter.value;
                if (currentSelected && currentSelected === String(payload.examId)) {
                    // update toggle to reflect new state
                    revealToggle.checked = !!payload.reveal;
                }
            }
          });
        } catch (e) { /* ignore if socket not loaded */ }

        // Handle reveal toggle POST
        if (revealToggle) {
            revealToggle.addEventListener('change', async function(){
                const examId = examFilter && examFilter.value;
                if (!examId) return;
                try {
                    revealToggle.disabled = true;
                    const res = await fetch(`/admin/exams/${examId}/toggle-reveal`, {
                        method: 'POST',
                        credentials: 'same-origin',
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                        body: JSON.stringify({ reveal: revealToggle.checked })
                    });
                    if (!res.ok) { revealToggle.checked = !revealToggle.checked; return; }
                    const data = await res.json().catch(() => null);
                    if (data && data.ok) {
                        examRevealMap[examId] = !!data.reveal;
                    } else {
                        revealToggle.checked = !revealToggle.checked;
                    }
                } catch (e) {
                    revealToggle.checked = !revealToggle.checked;
                } finally {
                    revealToggle.disabled = false;
                }
            });
        }

        // Initialize filters on load
        applyFilters();
    })();
</script>
<%- include('../partials/footer') %>



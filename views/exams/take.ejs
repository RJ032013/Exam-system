<%- include('../partials/header', { title: 'Taking Exam: ' + exam.title }) %>
<style>
    /* Modern exam focus mode */
    body.exam-focus .navbar,
    body.exam-focus footer {
        display: none !important;
    }

    body.exam-focus {
        background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);
        font-size: 1.06rem;
        line-height: 1.6;
        min-height: 100vh;
    }

    @media (max-width: 576px) {
        body.exam-focus {
            font-size: 1rem;
        }
    }

    .exam-container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 0 15px;
    }

    .exam-header {
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        padding: 20px;
        margin-bottom: 20px;
        position: sticky;
        top: 0;
        z-index: 1030;
    }

    .exam-title {
        font-weight: 700;
        color: #2c3e50;
        margin-bottom: 5px;
    }

    .exam-subtitle {
        color: #7f8c8d;
        font-size: 0.9rem;
    }

    .timer-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 12px 20px;
        border-radius: 50px;
        font-weight: 600;
        font-variant-numeric: tabular-nums;
        display: flex;
        align-items: center;
        gap: 8px;
        box-shadow: 0 4px 8px rgba(102, 126, 234, 0.3);
    }

    .progress-container {
        height: 8px;
        background: #e9ecef;
        border-radius: 10px;
        overflow: hidden;
        margin: 15px 0;
    }

    .progress-bar {
        height: 100%;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        border-radius: 10px;
        transition: width 0.3s ease;
    }

    .question-card {
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
        margin-bottom: 25px;
        overflow: hidden;
        border-left: 5px solid #667eea;
    }

    .question-header {
        background: #f8f9fa;
        padding: 15px 20px;
        border-bottom: 1px solid #e9ecef;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .question-number {
        font-weight: 600;
        color: #495057;
    }

    .question-points {
        background: #667eea;
        color: white;
        padding: 5px 12px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
    }

    .question-body {
        padding: 20px;
    }

    .question-text {
        font-size: 1.1rem;
        margin-bottom: 20px;
        color: #2c3e50;
    }

    .question-image {
        max-width: 100%;
        border-radius: 8px;
        margin: 15px 0;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
    }

    .option-container {
        margin-bottom: 15px;
    }

    .option {
        background: #f8f9fa;
        border: 2px solid transparent;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 10px;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
    }

    .option:hover {
        background: #e9ecef;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
    }

    .option.active {
        background: linear-gradient(135deg, #f5f7ff 0%, #e8edff 100%);
        border-color: #667eea;
        box-shadow: 0 4px 8px rgba(102, 126, 234, 0.2);
    }

    .option .form-check-input {
        transform: scale(1.3);
        margin-right: 15px;
    }

    .option .form-check-label {
        cursor: pointer;
        flex: 1;
        margin-bottom: 0;
    }

    .answer-textarea {
        border: 2px solid #e9ecef;
        border-radius: 10px;
        padding: 15px;
        width: 100%;
        resize: vertical;
        min-height: 150px;
        font-family: inherit;
        transition: border-color 0.2s ease;
    }

    .answer-textarea:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }

    .exam-footer {
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        padding: 20px;
        margin-top: 20px;
        position: sticky;
        bottom: 0;
        z-index: 1020;
    }

    .exam-stats {
        color: #6c757d;
        font-size: 0.9rem;
        margin-bottom: 15px;
    }

    .exam-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 15px;
    }

    .nav-buttons {
        display: flex;
        gap: 10px;
    }

    .nav-btn {
        padding: 10px 20px;
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.2s ease;
    }

    .nav-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .submit-btn {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        color: white;
        padding: 12px 25px;
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.2s ease;
    }

    .submit-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(102, 126, 234, 0.3);
    }

    .submit-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }

    #fsPrompt {
        background: linear-gradient(135deg, #f5f7ff 0%, #e8edff 100%);
        border-left: 5px solid #667eea;
        border-radius: 10px;
        padding: 15px 20px;
        margin-bottom: 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .kbd {
        padding: .15rem .35rem;
        border: 1px solid #ced4da;
        border-bottom-width: 2px;
        border-radius: .25rem;
        background: #fff;
        font-size: .85rem;
    }

    .progress-indicator {
        display: flex;
        justify-content: center;
        margin: 20px 0;
    }

    .progress-dot {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        background: #e9ecef;
        margin: 0 5px;
        transition: all 0.3s ease;
    }

    .progress-dot.active {
        background: #667eea;
        transform: scale(1.3);
    }

    .progress-dot.completed {
        background: #28a745;
    }

    @media (max-width: 768px) {
        .exam-header {
            padding: 15px;
        }

        .exam-actions {
            flex-direction: column;
            align-items: stretch;
        }

        .nav-buttons {
            justify-content: space-between;
        }

        .submit-btn {
            width: 100%;
        }
    }
</style>

<div class="exam-container py-3">
    <div class="exam-header">
        <div class="row align-items-center">
            <div class="col-md-6">
                <h1 class="exam-title"><%= exam.title %></h1>
                <p class="exam-subtitle">Online Assessment</p>
            </div>
            <div class="col-md-6 text-md-end mt-3 mt-md-0">
                <div class="d-flex flex-column flex-md-row align-items-center justify-content-md-end gap-3">
                    <div class="progress-info">
                        <span id="progressLabelTop">Question 1 of <%= exam.questions.length %></span>
                    </div>
                    <div class="timer-container">
                        <i class="bi bi-clock-fill"></i>
                        <span id="timer" data-duration="<%= exam.duration %>"><%= exam.duration %>:00</span>
                    </div>
                </div>
            </div>
        </div>
        <div class="progress-container">
            <div id="examProgress" class="progress-bar" style="width: 0%"></div>
        </div>
    </div>

    <form id="examForm" action="/exams/submit/<%= exam._id %>" method="POST">
        <div id="fsPrompt" class="d-flex justify-content-between align-items-center" role="alert" style="display:none;">
            <div class="me-2">
                <i class="bi bi-arrows-fullscreen"></i> For a better and secure experience, please enter fullscreen.
            </div>
            <button type="button" class="btn btn-sm btn-primary" id="fsEnterBtn">
                <i class="bi bi-fullscreen"></i> Enter Fullscreen
            </button>
        </div>

        <div class="progress-indicator">
            <% for(let i = 0; i < exam.questions.length; i++) { %>
                <div class="progress-dot" data-index="<%= i %>"></div>
            <% } %>
        </div>

        <div class="row">
            <div class="col-12">
                <% exam.questions.forEach((question, index)=> { %>
                    <div class="question-card" data-index="<%= index %>">
                        <div class="question-header">
                            <div class="question-number">Question <%= index + 1 %></div>
                            <div class="question-points"><%= question.points %> pts</div>
                        </div>
                        <div class="question-body">
                            <p class="question-text"><%= question.question %></p>
                            <% if (question.imagePath) { %>
                                <div class="mb-3 text-center">
                                    <img src="<%= question.imagePath %>" alt="Question image" class="question-image">
                                </div>
                            <% } %>
                            <% if (question.options && question.options.length> 0) { %>
                                <div class="option-container">
                                    <% const oo=(typeof optionOrder !=='undefined' && Array.isArray(optionOrder)) ? optionOrder : []; 
                                       const order=oo[index] && Array.isArray(oo[index]) ? oo[index] : question.options.map((_, i)=> i); %>
                                    <% order.forEach((optIdx, displayIdx) => { %>
                                        <div class="form-check option">
                                            <input class="form-check-input" type="radio" name="answers[<%= index %>]" 
                                                   id="q<%= index %>_<%= displayIdx %>" value="<%= displayIdx %>" required>
                                            <label class="form-check-label" for="q<%= index %>_<%= displayIdx %>">
                                                <%= question.options[optIdx] %>
                                            </label>
                                        </div>
                                    <% }); %>
                                </div>
                            <% } else { %>
                                <div class="mb-3">
                                    <textarea class="answer-textarea" name="answers[<%= index %>]" 
                                              placeholder="Type your answer here..."></textarea>
                                </div>
                            <% } %>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>

        <div class="exam-footer">
            <div class="exam-stats">
                Total Questions: <%= exam.questions.length %> | Total Points: <%= exam.questions.reduce((sum, q)=> sum + q.points, 0) %>
            </div>
            <div class="exam-actions">
                <div class="nav-buttons">
                    <button type="button" class="btn btn-outline-secondary nav-btn" id="prevBtn">
                        <i class="bi bi-arrow-left"></i> Previous
                    </button>
                    <button type="button" class="btn btn-outline-secondary nav-btn" id="nextBtn">
                        Next <i class="bi bi-arrow-right"></i>
                    </button>
                </div>
                <div class="progress-info" id="progressLabel">Question 1 of <%= exam.questions.length %></div>
                <button type="button" class="submit-btn" onclick="submitExam()" id="submitBtn">
                    <i class="bi bi-check-circle"></i> Submit Exam
                </button>
            </div>
        </div>
    </form>
</div>

<script>
    // Anti-cheat: Active only during this exam page
    // Invalidate if: tab loses visibility/focus or another exam tab opens
    const submissionId = '<%= submissionId %>';
    let invalidated = false;
    const pageId = Math.random().toString(36).slice(2);
    const channel = ('BroadcastChannel' in window) ? new BroadcastChannel('exam_guard_channel') : null;

    function invalidateAndLock() {
        if (invalidated) return;
        invalidated = true;
        try {
            if (navigator.sendBeacon) {
                const blob = new Blob([JSON.stringify({ ts: Date.now() })], { type: 'application/json' });
                navigator.sendBeacon('/exams/invalidate/' + submissionId, blob);
            } else {
                fetch('/exams/invalidate/' + submissionId, { method: 'POST' });
            }
        } catch (_) { }
        setTimeout(() => {
            document.body.innerHTML = '<div style="display:flex;align-items:center;justify-content:center;height:100vh;"><h2 style=\"color:#d9534f;font-size:2rem;\">Session Ended: Exam cannot be recovered.</h2></div>';
            document.body.style.background = '#fff';
        }, 0);
    }
    document.addEventListener('visibilitychange', function () {
        if (document.hidden) invalidateAndLock();
    });
    window.addEventListener('blur', function () { invalidateAndLock(); });

    if (channel) {
        channel.onmessage = function (e) {
            if (e && e.data && e.data.type === 'exam-open' && e.data.pageId !== pageId) {
                invalidateAndLock();
            }
        };
        setTimeout(() => channel.postMessage({ type: 'exam-open', pageId }), 50);
    }
    let timeLeft = (function () {
        const el = document.getElementById('timer');
        const raw = el ? parseInt(el.getAttribute('data-duration'), 10) : 0;
        const d = Number.isFinite(raw) ? raw : 0;
        return d * 60; // Convert to seconds
    })();
    let isSubmitting = false;
    const timerElement = document.getElementById('timer');

    function updateTimer() {
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;

        if (timeLeft <= 0) {
            clearInterval(timerInterval);
            document.getElementById('examForm').submit();
        }
        timeLeft--;
    }

    const timerInterval = setInterval(updateTimer, 1000);

    // Realtime: listen for server-side invalidation/submission
    try {
        const socket = io();
        socket.emit('join-submission', submissionId);
        socket.on('submission:update', (payload) => {
            if (!payload) return;
            if (payload.status === 'invalidated') {
                invalidateAndLock();
            } else if (payload.status === 'submitted') {
                // If server marks as submitted elsewhere, reflect immediately
                document.getElementById('examForm').submit();
            }
        });
    } catch (e) { /* ignore if socket.io not available */ }

    function submitExam() {
        const form = document.getElementById('examForm');
        const btn = document.getElementById('submitBtn');
        btn.disabled = true;
        isSubmitting = true;
        // Submit via AJAX to avoid full page reload (prevents session guard from invalidation)
        const formData = new FormData(form);
        // Convert to application/x-www-form-urlencoded so Express can parse without multer
        const params = new URLSearchParams();
        for (const [key, value] of formData.entries()) {
            params.append(key, value);
        }
        fetch(form.action, { method: 'POST', body: params, headers: { 'x-requested-with': 'XMLHttpRequest', 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8', 'Accept': 'application/json' } })
            .then(r => r.json())
            .then(data => {
                if (data && data.ok && data.resultUrl) {
                    window.location.replace(data.resultUrl);
                } else {
                    // Fallback: enable button if server rejected
                    btn.disabled = false;
                    isSubmitting = false;
                }
            })
            .catch(() => { btn.disabled = false; isSubmitting = false; });
    }

    // Auto-submit when time runs out
    window.addEventListener('beforeunload', function (e) {
        if (!invalidated && !isSubmitting && timeLeft > 0) {
            invalidateAndLock();
            e.preventDefault();
            e.returnValue = '';
        }
    });

    // Attempt to enter fullscreen when exam starts (with fallback on first user interaction)
    (function () {
        function requestFullscreen() {
            const el = document.documentElement;
            if (el.requestFullscreen) return el.requestFullscreen();
            if (el.webkitRequestFullscreen) return el.webkitRequestFullscreen();
            if (el.msRequestFullscreen) return el.msRequestFullscreen();
            return Promise.reject('fullscreen_not_supported');
        }

        function attachUserGestureOnce() {
            const once = () => {
                requestFullscreen().finally(() => {
                    document.removeEventListener('click', once, true);
                    document.removeEventListener('keydown', once, true);
                    document.removeEventListener('touchstart', once, true);
                });
            };
            document.addEventListener('click', once, true);
            document.addEventListener('keydown', once, true);
            document.addEventListener('touchstart', once, true);
        }

        function enterFullscreenWithFallback() {
            try {
                const p = requestFullscreen();
                if (p && typeof p.catch === 'function') p.catch(() => attachUserGestureOnce());
            } catch (e) {
                attachUserGestureOnce();
            }
        }

        if (document.readyState === 'complete' || document.readyState === 'interactive') {
            setTimeout(enterFullscreenWithFallback, 0);
        } else {
            document.addEventListener('DOMContentLoaded', enterFullscreenWithFallback);
        }
    })();

    // Ensure focus class
    document.body.classList.add('exam-focus');

    // Fullscreen prompt UI
    (function () {
        const fsPrompt = document.getElementById('fsPrompt');
        const fsBtn = document.getElementById('fsEnterBtn');
        function isFs() {
            return !!(document.fullscreenElement || document.webkitFullscreenElement || document.msFullscreenElement);
        }
        function updateFsBanner() {
            const enabled = isFs();
            fsPrompt.style.display = enabled ? 'none' : '';
            document.body.classList.toggle('exam-focus', !enabled ? true : true);
        }
        function reqFs() {
            const el = document.documentElement;
            const p = (el.requestFullscreen && el.requestFullscreen()) ||
                (el.webkitRequestFullscreen && el.webkitRequestFullscreen()) ||
                (el.msRequestFullscreen && el.msRequestFullscreen());
            if (p && typeof p.catch === 'function') p.catch(() => { });
        }
        if (fsBtn) fsBtn.addEventListener('click', reqFs);
        ['fullscreenchange', 'webkitfullscreenchange', 'msfullscreenchange'].forEach(evt => document.addEventListener(evt, updateFsBanner));
        // Show banner soon after load
        setTimeout(updateFsBanner, 300);
    })();

    // Show only one question at a time
    const cards = Array.from(document.querySelectorAll('.question-card'));
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const submitBtn = document.getElementById('submitBtn');
    const progressLabel = document.getElementById('progressLabel');
    const progressLabelTop = document.getElementById('progressLabelTop');
    const progressBar = document.getElementById('examProgress');
    const progressDots = Array.from(document.querySelectorAll('.progress-dot'));
    let currentIndex = 0;

    function updateVisibility() {
        cards.forEach((el, idx) => {
            if (idx === currentIndex) {
                el.style.display = '';
                // Ensure current question radios are required
                el.querySelectorAll('input[type="radio"]').forEach(i => i.required = true);
            } else {
                el.style.display = 'none';
                // Avoid required validation on hidden questions until submit
                el.querySelectorAll('input[type="radio"]').forEach(i => i.required = false);
            }
        });
        
        // Update progress dots
        progressDots.forEach((dot, idx) => {
            if (idx < currentIndex) {
                dot.classList.add('completed');
                dot.classList.remove('active');
            } else if (idx === currentIndex) {
                dot.classList.add('active');
                dot.classList.remove('completed');
            } else {
                dot.classList.remove('active', 'completed');
            }
        });
        
        prevBtn.disabled = currentIndex === 0;
        nextBtn.disabled = currentIndex === cards.length - 1;
        submitBtn.style.display = currentIndex === cards.length - 1 ? '' : 'none';
        if (progressLabel) {
            const text = `Question ${currentIndex + 1} of ${cards.length}`;
            progressLabel.textContent = text;
            if (progressLabelTop) progressLabelTop.textContent = text;
        }
        if (progressBar) {
            const pct = Math.max(0, Math.min(100, Math.round(((currentIndex + 1) / cards.length) * 100)));
            progressBar.style.width = pct + '%';
        }
    }

    prevBtn.addEventListener('click', function () {
        if (currentIndex > 0) {
            currentIndex--;
            updateVisibility();
        }
    });

    nextBtn.addEventListener('click', function () {
        if (currentIndex < cards.length - 1) {
            currentIndex++;
            updateVisibility();
        }
    });

    // Initialize view
    updateVisibility();

    // Enhance option selection highlighting
    document.querySelectorAll('.question-card input[type="radio"]').forEach(input => {
        input.addEventListener('change', function () {
            const group = this.name;
            document.querySelectorAll(`input[name="${group}"]`).forEach(i => {
                const wrapper = i.closest('.option');
                if (wrapper) wrapper.classList.toggle('active', i.checked);
            });
        });
    });
</script>

<%- include('../partials/footer') %>
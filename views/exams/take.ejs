<%- include('../partials/header', { title: 'Taking Exam: ' + exam.title }) %>

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2><%= exam.title %></h2>
        </div>
    </div>
</div>

<!-- Fixed timer always visible -->
<div class="timer alert alert-warning mb-0 fixed-timer" role="status" aria-live="polite">
    <i class="bi bi-clock"></i> Time Remaining: <span id="timer"><%= exam.duration %>:00</span>
  </div>

<form id="examForm" action="/exams/submit/<%= exam._id %>" method="POST">
    <div class="row">
        <div class="col-12">
            <% exam.questions.forEach((question, index) => { %>
                <div class="card mb-3 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">
                            Question <%= index + 1 %> 
                            <span class="badge bg-secondary"><%= question.points %> pts</span>
                        </h5>
                        <p class="card-text"><%= question.question %></p>
                        <% if (question.imagePath) { %>
                            <div class="mb-3">
                                <img src="<%= question.imagePath %>" alt="Question image" class="img-fluid rounded border">
                            </div>
                        <% } %>
                        <% if (question.options && question.options.length > 0) { %>
                            <div class="list-group">
                                <% 
                                  const oo = (typeof optionOrder !== 'undefined' && Array.isArray(optionOrder)) ? optionOrder : [];
                                  const order = oo[index] && Array.isArray(oo[index]) ? oo[index] : question.options.map((_, i) => i);
                                  order.forEach((optIdx, displayIdx) => { 
                                %>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" 
                                               name="answers[<%= index %>]" 
                                               id="q<%= index %>_<%= displayIdx %>" 
                                               value="<%= displayIdx %>"
                                               required>
                                        <label class="form-check-label" for="q<%= index %>_<%= displayIdx %>">
                                            <%= question.options[optIdx] %>
                                        </label>
                                    </div>
                                <% }); %>
                            </div>
                        <% } else { %>
                            <div class="mb-3">
                                <textarea class="form-control" name="answers[<%= index %>]" rows="3" placeholder="Type your answer here..."></textarea>
                            </div>
                        <% } %>
                    </div>
                </div>
            <% }); %>
        </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-12">
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center gap-2">
                <div class="text-muted order-2 order-md-1">
                    Total Questions: <%= exam.questions.length %> | 
                    Total Points: <%= exam.questions.reduce((sum, q) => sum + q.points, 0) %>
                </div>
                <div class="order-1 order-md-2">
                    <button type="button" class="btn btn-primary" onclick="submitExam()" id="submitBtn">
                        <i class="bi bi-check-circle"></i> Submit Exam
                    </button>
                </div>
            </div>
        </div>
    </div>
</form>

<script>
// Anti-cheat: Active only during this exam page
// Invalidate if: tab loses visibility/focus or another exam tab opens
const submissionId = '<%= submissionId %>';
let invalidated = false;
const pageId = Math.random().toString(36).slice(2);
const channel = ('BroadcastChannel' in window) ? new BroadcastChannel('exam_guard_channel') : null;

function invalidateAndLock() {
    if (invalidated) return;
    invalidated = true;
    try {
        if (navigator.sendBeacon) {
            const blob = new Blob([JSON.stringify({ ts: Date.now() })], { type: 'application/json' });
            navigator.sendBeacon('/exams/invalidate/' + submissionId, blob);
        } else {
            fetch('/exams/invalidate/' + submissionId, { method: 'POST' });
        }
    } catch (_) {}
    setTimeout(() => {
        document.body.innerHTML = '<div style="display:flex;align-items:center;justify-content:center;height:100vh;"><h2 style=\"color:#d9534f;font-size:2rem;\">Session Ended: Exam cannot be recovered.</h2></div>';
        document.body.style.background = '#fff';
    }, 0);
}
document.addEventListener('visibilitychange', function(){
    if (document.hidden) invalidateAndLock();
});
window.addEventListener('blur', function(){ invalidateAndLock(); });

if (channel) {
    channel.onmessage = function(e){
        if (e && e.data && e.data.type === 'exam-open' && e.data.pageId !== pageId) {
            invalidateAndLock();
        }
    };
    setTimeout(() => channel.postMessage({ type: 'exam-open', pageId }), 50);
}
let timeLeft = <%= exam.duration %> * 60; // Convert to seconds
let isSubmitting = false;
const timerElement = document.getElementById('timer');

function updateTimer() {
    const minutes = Math.floor(timeLeft / 60);
    const seconds = timeLeft % 60;
    timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    
    if (timeLeft <= 0) {
        clearInterval(timerInterval);
        document.getElementById('examForm').submit();
    }
    timeLeft--;
}

const timerInterval = setInterval(updateTimer, 1000);

// Realtime: listen for server-side invalidation/submission
try {
  const socket = io();
  socket.emit('join-submission', submissionId);
  socket.on('submission:update', (payload) => {
    if (!payload) return;
    if (payload.status === 'invalidated') {
      invalidateAndLock();
    } else if (payload.status === 'submitted') {
      // If server marks as submitted elsewhere, reflect immediately
      document.getElementById('examForm').submit();
    }
  });
} catch (e) { /* ignore if socket.io not available */ }

function submitExam() {
    const form = document.getElementById('examForm');
    const btn = document.getElementById('submitBtn');
    btn.disabled = true;
    isSubmitting = true;
    // Submit via AJAX to avoid full page reload (prevents session guard from invalidation)
    const formData = new FormData(form);
    // Convert to application/x-www-form-urlencoded so Express can parse without multer
    const params = new URLSearchParams();
    for (const [key, value] of formData.entries()) {
        params.append(key, value);
    }
    fetch(form.action, { method: 'POST', body: params, headers: { 'x-requested-with': 'XMLHttpRequest', 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8', 'Accept': 'application/json' } })
        .then(r => r.json())
        .then(data => {
            if (data && data.ok && data.resultUrl) {
                window.location.replace(data.resultUrl);
            } else {
                // Fallback: enable button if server rejected
                btn.disabled = false;
                isSubmitting = false;
            }
        })
        .catch(() => { btn.disabled = false; isSubmitting = false; });
}

// Auto-submit when time runs out
window.addEventListener('beforeunload', function(e) {
    if (!invalidated && !isSubmitting && timeLeft > 0) {
        invalidateAndLock();
        e.preventDefault();
        e.returnValue = '';
    }
});
</script>

<%- include('../partials/footer') %>